package org.karibu;

import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.lang.reflect.Field;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.karibu.model.Announcement;
import org.karibu.model.Announcer;
import org.karibu.model.Category;

import android.app.AlertDialog;
import android.app.ListActivity;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Typeface;
import android.location.Criteria;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.location.LocationProvider;
import android.os.Bundle;
import android.preference.PreferenceManager;
import android.util.Log;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.BaseAdapter;
import android.widget.Gallery;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.SimpleAdapter;
import android.widget.TextView;
import android.widget.Toast;

import com.google.gson.Gson;
import com.google.gson.JsonParser;
import com.google.gson.reflect.TypeToken;

public class KaribuActivity extends ListActivity implements LocationListener {
	/* URL for Server Connection */	
	private String url =  KaribuApplication.HOME_URL + "announcements.json";
	
	/* These properties get removed from the Announcer JSON data before being sent to server. */
	private String removableProperties[] = {"id", "announcer", "categories", "distance"};

	/* Data from Database */
	List<Announcement> announcements;
	
	/* UI Elements */
	// private ListView list;
	// private Button viewMap;
	// private OnClickListener viewMapListener = null;
	// private CheckBoxifiedTextListAdapter cbla; // Create CheckBox List Adapter, cbla
	
	/* Gallery for Info Display */
	private Gallery mGallery;
	
	// private int categoryNum;
	/* Array of Category Strings to display in our list of Categories */
//	private Resources res = getResources();
	private String[] items; 
//	private String[] items = { "Food", "Cosmetics", "Clothes", "Stationery",
//			"Groceries", "Movies", "Electronics", "Footwear", "Academic",
//			"Nature" };
	private List<Announcement>[] announceInCategory;
	// each element is a list of corresponding announcements

	/* Fields for Location Listener */
	LocationManager lm;
	Location userLocation;
	String provider;
	double lat, lng;
	int x, y; // position on screen

	/** Called when the activity is first created. */
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.main);

		// Configure the look of elements in the view.
		configureView();

		items = getResources().getStringArray(R.array.categoryItems);
		announceInCategory = new ArrayList[items.length];
		// Get the input stream from the URL and read it.
//		Reader reader = new InputStreamReader(KaribuApplication.getData(url));

		// Instantiate a new Gson object which will parse the JSON data 
		// retrieved from the URL . . . and a new JSON parser which will make a
		// make a JsonObject out of a string representation of an Announcement.
		Gson gson = new Gson();
		JsonParser parser = new JsonParser();

		// Create a list collection of Announcement objects from the JSON
//		Type type = new TypeToken<Collection<Announcement>>(){}.getType();
//		announcements = gson.fromJson(reader, type);		
//		
//		Announcement announcement = announcements.get(1);		
//		Log.i("Annc from gson", gson.toJson(announcement));
//		
//		// Convert the announcement to a JsonObject to remove the id (that
//		// gets autogenerated on the server side) and other properties that aren't needed
//		// to create an Announcer on the server side.
//		JsonObject announcementData = (JsonObject)parser.parse(gson.toJson(announcement));
//		for (int i = 0; i < removableProperties.length; i++)
//			announcementData.remove(removableProperties[i]);
//		
		//KaribuApplication.postData(url, "announcement:"+announcementData.toString());
		
		announcements = new ArrayList<Announcement>();
		for (int i = 0; i < announceInCategory.length; i++)
			announceInCategory[i] = new ArrayList<Announcement>();
		
		//get preferences
		SharedPreferences getPrefs = PreferenceManager.getDefaultSharedPreferences(getBaseContext());
		boolean isRcvAllowed = getPrefs.getBoolean("enable_msg", true);
		String[] selected = ListPreferenceMultiSelect.parseStoredValue(getPrefs.getString("enable_cates", "#ALL#"));
		
//		if (isRcvAllowed && selected.length > 0) {
//			Set<String> selectedCate = new HashSet<String>();
//			for (String s : selected)
//				selectedCate.add(s);
			
			for (int i = 0; i < 1; i++) {
				Announcement a = new Announcement();
				a.latitude = Double.parseDouble("40.4405556");
				a.longitude = Double.parseDouble("-79.9961111");
				a.announcer = new Announcer();
				a.announcer.name = "Subway";
				a.street = "S Craig St.";
				a.overview = "$5 after 4pm!!";
				a.details = "$5 after 4pm!!";
				
//				if (selectedCate.contains("#ALL#") || selectedCate.contains("0")) {
					announceInCategory[0].add(a);
					announcements.add(a);
//				}
			}
			for (int i = 0; i < 4; i++) {
				Announcement a = new Announcement();
				a.latitude = Double.parseDouble("40.4405556");
				a.longitude = Double.parseDouble("-79.9961111");
				a.announcer = new Announcer();
				a.announcer.name = "SEPHORA";
				a.street = "Market District";
				a.overview = "10% OFF over $49";
				
//				if (selectedCate.contains("#All#") || selectedCate.contains("1")) {
					announceInCategory[1].add(a);
					announcements.add(a);
//				}
			}
//		}
		displayList();
		// list item click listener
//		list.setOnItemClickListener(new OnItemClickListener() {
//			public void onItemClick(AdapterView parent, View v, int position,
//					long id) {
//				
//			}
//		});

		// button
//		viewMapListener = new OnClickListener() {
//			public void onClick(View v) {
//				Intent intent = new Intent(KaribuActivity.this,
//						DetailsActivity.class);
//				Bundle bundle = new Bundle();
//				bundle.putDouble("userLat", lat);
//				bundle.putDouble("userLng", lng);
//				intent.putExtras(bundle);
//				startActivity(intent);
//			}
//		};
//		viewMap = (Button) findViewById(R.id.viewMap);
//		viewMap.setOnClickListener(viewMapListener);
		
		// manager listen to user location
		lm = (LocationManager) getSystemService(Context.LOCATION_SERVICE);
		Criteria crit = new Criteria(); // for selecting a location provider
		provider = lm.getBestProvider(crit, false); // default
		lm.requestLocationUpdates(provider, 35000, 100, this);
		userLocation = lm.getLastKnownLocation(provider); // update location for
															// listener
		
		Toast.makeText(getBaseContext(), provider, Toast.LENGTH_SHORT);
		if (userLocation != null) {
			Toast.makeText(getBaseContext(), "getLocation!!",
					Toast.LENGTH_SHORT);
			lat = userLocation.getLatitude();
			lng = userLocation.getLongitude();
			// send location to server
			// String updateReq = url + "?latitude=" + lat + "&longitude=" +
			// lng;
			//
			// InputStream source = getData(updateReq);
			// Reader reader = new InputStreamReader(source);
			//
			// Gson gson = new Gson();
			//
			// Toast.makeText(this, "Hi Ava!", Toast.LENGTH_LONG);
			//
			// Type type = new TypeToken<Collection<Announcement>>() {
			// }.getType();
			// announcements = gson.fromJson(reader, type);
//			AlertDialog proximityAlert = new AlertDialog.Builder(
//					KaribuActivity.this).create();
//			proximityAlert.setTitle("new deal alert!!");
//			proximityAlert.setMessage("Lat " + lat + " lng " + lng);
//			proximityAlert.setButton("OK",
//					new DialogInterface.OnClickListener() {
//
//						public void onClick(DialogInterface dialog, int which) {
//							dialog.dismiss();
//						}
//					});
//			proximityAlert.show();
		} else {
			Toast.makeText(getBaseContext(), "provider disabled",
					Toast.LENGTH_SHORT);
		}

//		cbla = new CheckBoxifiedTextListAdapter(this);
//		for (int k = 0; k < items.length; k++) {
//			cbla.addItem(new CheckBoxifiedText(items[k], true));
//		}
//		setListAdapter(cbla);
		
		mGallery = (Gallery) findViewById(R.id.gallery);
		try {
			mGallery.setAdapter(new ImageAdapter(this));
		} catch (IllegalArgumentException e) {
			e.printStackTrace();
		} catch (IllegalAccessException e) {
			e.printStackTrace();
		}
		mGallery.setOnItemClickListener(new OnItemClickListener() {
			public void onItemClick(AdapterView parent, View v, int position,
					long id) {
				KaribuActivity.this.setTitle(String.valueOf(position));
				Intent intent2 = new Intent(KaribuActivity.this,
						ShowMessageActivity.class);
				Bundle bundle = new Bundle();
				bundle.putString("Category", items[position]);
				bundle.putInt("numOfMsg", announceInCategory[position].size());
				for (int i = 0; i < announceInCategory[position].size(); i++)
					bundle.putSerializable("msg" + i,
							announceInCategory[position].get(i));
				intent2.putExtras(bundle);
				startActivity(intent2);
			}
		});


	}// end OnCreate

	@Override
	public boolean onCreateOptionsMenu(android.view.Menu menu) {
		// TODO Auto-generated method stub
		MenuInflater blowUp = getMenuInflater();
		blowUp.inflate(R.menu.our_menu, menu);
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		// TODO Auto-generated method stub
		switch(item.getItemId()) {
		case R.id.main_list:	//back to main list
			break;
		case R.id.post:
			Intent intent3 = new Intent(KaribuActivity.this, PostNew.class);
			startActivity(intent3);
			break;
		case R.id.preferences:
			Intent intent2 = new Intent(KaribuActivity.this, Prefs.class);
			startActivity(intent2);
			break;
		case R.id.cur_loc:
			Intent intent4 = new Intent(KaribuActivity.this, DetailsActivity.class);
			startActivity(intent4);
			break;
		case R.id.aboutUs:
			Intent intent1 = new Intent(KaribuActivity.this, AboutUs.class);
			startActivity(intent1);
			break;
		}
		return false;
	}

	/*
	 * The following method configures the look of elements in the view.
	 */
	private void configureView() {
		// Set the font of the hello_text string to be Continuum.tff
		TextView txt = (TextView) findViewById(R.id.hello_text);
		Typeface font = Typeface.createFromAsset(getAssets(), "Contm__.ttf");
		txt.setTypeface(font);
	}

	/*
	 * class ImageAdapter is used to control gallery source and operation.
	 */
	private class ImageAdapter extends BaseAdapter {
		private Context mContext;
		private ArrayList<Integer> imgList = new ArrayList<Integer>();
		private ArrayList<Object> imgSizes = new ArrayList<Object>();

		public ImageAdapter(Context c) throws IllegalArgumentException,
				IllegalAccessException {
			mContext = c;

			// 用反射机制来获取资源中的图片ID和尺寸
			Field[] fields = R.drawable.class.getDeclaredFields();
			for (Field field : fields) {
				if (field.getName().contains("icon")) {
					int index = field.getInt(R.drawable.class);
					// 保存图片ID
					imgList.add(index);
					// 保存图片大小
					int size[] = new int[2];
					Bitmap bmImg = BitmapFactory.decodeResource(getResources(),
							index);
					size[0] = bmImg.getWidth();
					size[1] = bmImg.getHeight();
					imgSizes.add(size);
				}
			}
		}

		public int getCount() {
			return imgList.size();
		}

		public Object getItem(int position) {
			return position;
		}

		public long getItemId(int position) {
			return position;
		}

		public View getView(int position, View convertView, ViewGroup parent) {
			ImageView i = new ImageView(mContext);
			// 从imgList取得图片ID
			i.setImageResource(imgList.get(position).intValue());
			i.setScaleType(ImageView.ScaleType.FIT_XY);
			// 从imgSizes取得图片大小
			int size[] = new int[2];
			size = (int[]) imgSizes.get(position);
			i.setLayoutParams(new Gallery.LayoutParams(size[0], size[1]));
			return i;
		}

	}

	private List<Map<String, Object>> getData() {
		//remove old one
//		for (int i = 0; i < announceInCategory.length; i++) {
//			if (announceInCategory[i].size() > 0) {
//				for (int j = 0; j < announceInCategory[i].size(); j++)
//				announceInCategory[i].remove(0);
//			}
//		}
		// For debug purposes, output selected properties for each of the
		// Announcements in the List to the Android Log.
		if (announcements != null) {
		for (Announcement announcement : announcements) {
			Log.i("Longitude", Double.toString(announcement.longitude));
			Log.i("Latitude", Double.toString(announcement.latitude));
//			Log.i("City", announcement.city);
//			Log.i("Street", announcement.street);
//			Log.i("Created At", announcement.createdAt);
//			Log.i("Distance Away",
//					Double.toString(announcement.distanceFromUser));
			Log.i("Overview", announcement.overview);
//			Log.i("Details", announcement.details);
			if (announcement.announcer != null)
				Log.i("Announcer Name", announcement.announcer.name);
			if (announcement.categories != null) {
				for (Category c : announcement.categories) {
					Log.i("Category", String.valueOf(c.id));
					announceInCategory[c.id - 1].add(announcement);
				}
			}
		}
		}
		
		List<Map<String, Object>> myList = new ArrayList<Map<String, Object>>();
		for (int i = 0; i < items.length; i++) {
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("category", items[i]);
			map.put("msg_num", announceInCategory[i].size() + " new messages");
			myList.add(map);
		}
		return myList;
	}

	// display list, called when announcement updated
	private void displayList() {
		// get data that displayed in every list item
		setContentView(R.layout.main);
//		list = (ListView) findViewById(R.layout.main);
		List<Map<String, Object>> myList = getData();
		SimpleAdapter adapter = new SimpleAdapter(this, // 没什么解释
				myList,// 数据来源
				R.layout.category_item,// ListItem的XML实现
				// 动态数组与ListItem对应的子项
				new String[] { "category", "msg_num" },
				new int[] { R.id.category, R.id.msg_num });
//		list.setAdapter(mSchedule);
		setListAdapter(adapter);
	}

	@Override
	protected void onListItemClick(ListView l, View v, int position, long id) {
		// TODO Auto-generated method stub
		Intent intent1 = new Intent(KaribuActivity.this,
				ShowMessageActivity.class);
		Bundle bundle = new Bundle();
		bundle.putString("Category", items[position]);
		bundle.putInt("numOfMsg", announceInCategory[position].size());
		for (int i = 0; i < announceInCategory[position].size(); i++)
			bundle.putSerializable("msg" + i,
					announceInCategory[position].get(i));
		intent1.putExtras(bundle);
		startActivity(intent1);
	}

	/*
	 * 成员内部类,此处为提高可重用性，也可以换成匿名内部类
	 */
	private class BtnOnClickListener implements View.OnClickListener {

		private int dialogId = 0; // 默认为0则不显示对话框

		public BtnOnClickListener(int dialogId) {
			this.dialogId = dialogId;
		}

		public void onClick(View view) {
			showDialog(dialogId);
		}

	}

	public void onLocationChanged(Location l) {
		lat = l.getLatitude();
		lng = l.getLongitude();
		// send location to server
		String updateReq = url + "?latitude=" + lat + "&longitude=" + lng;
		Log.i("url", updateReq);

		InputStream source = KaribuApplication.getData(updateReq);
		Reader reader = new InputStreamReader(source);

		Gson gson = new Gson();

		Toast.makeText(this, "Hi Ava!", Toast.LENGTH_LONG);

		Type type = new TypeToken<Collection<Announcement>>() {
		}.getType();
		announcements = gson.fromJson(reader, type);
		AlertDialog proximityAlert = new AlertDialog.Builder(
				KaribuActivity.this).create();
		proximityAlert.setTitle("new deal alert!!");
		proximityAlert.setMessage("There is a deal near you");
		proximityAlert.setButton("Close", new DialogInterface.OnClickListener() {

			public void onClick(DialogInterface dialog, int which) {
				dialog.dismiss();
			}
		});
//		proximityAlert.setButton("View it", new DialogInterface.OnClickListener() {
//			public void onClick(DialogInterface dialog, int which) {				
//			}
//		});
		proximityAlert.show();
		displayList();
	}

	public void onProviderDisabled(String provider) {
		lm.removeUpdates(this);

	}

	public void onProviderEnabled(String provider) {
		// TODO Auto-generated method stub
		lm.requestLocationUpdates(provider, 10000, 100, this);

	}

	@Override
	protected void onPause() {
		super.onPause();
		lm.removeUpdates(this);
	}

	@Override
	protected void onResume() {
		super.onResume();
		lm.requestLocationUpdates(provider, 10000, 100, this);
	}

	public void onStatusChanged(String provider, int status, Bundle extras) {
		// TODO Auto-generated method stub
		if (status == LocationProvider.AVAILABLE)
			lm.requestLocationUpdates(provider, 10000, 100, this);
		
	}
}